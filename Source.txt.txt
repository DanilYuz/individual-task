#include<iostream>
#include<string>
using namespace std;

#define DEL 1
#define INS 2
#define SUB 3

struct Change
{
    int first;
    int second;
    int data;
};

int getVectorChange(Change ed, int deletion, int insertion, int substitution) {
    if (substitution == 0)
    {
        return SUB;
    }

    int res = deletion < insertion ? DEL : INS;
    int di_min = deletion < insertion ? deletion : insertion;

    if (ed.first > 1 && ed.second > 1)
    {
        return substitution > di_min ? res : SUB;
    }
    else
    {
        return res;
    }
}

int min(int a, int b, int c) {
    int var = a < b ? a : b;
    int result = var < c ? var : c;
    return result;
}

int DamerauLevensteinDistance(string strA, string strB)
{
    int m = strA.length(), n = strB.length();
    int** A = new int* [m + 1];
    for (int i = 0; i <= m; i++)
    {
        A[i] = new int[n + 1];
        for (int j = 0; j <= n; j++)
        {
            A[i][j] = 0;
        }
    }
    for (int i = 1; i <= m; i++)
    {
        A[i][0] = i;
    }
    for (int j = 1; j <= n; j++)
    {
        A[0][j] = j;
    }
    for (int j = 1; j <= n; j++)
    {
        for (int i = 1; i <= m; i++)
        {
            int substitutionCost = strA[i - 1] == strB[j - 1] ? 0 : 1;
            A[i][j] = min(A[i - 1][j] + 1, A[i][j - 1] + 1, A[i - 1][j - 1] + substitutionCost);
        }
    }

    int cssize = m > n ? m + 1 : n + 1;
    Change* changeSet = new Change[cssize];
    int x = m, y = n;
    for (int k = cssize - 1; k >= 0; k--) {
        changeSet[k].first = x;
        changeSet[k].second = y;
        changeSet[k].data = A[x][y];

        if (x == 0 && y == 0) {
            std::cout << "\n";
            break;
        }

        int chvect = getVectorChange(changeSet[k], A[x - 1][y], A[x][y - 1], A[x - 1][y - 1]);
        switch (chvect)
        {
        case DEL:
            x--;
            break;
        case INS:
            y--;
            break;
        case SUB:
            x--; y--;
            break;
        }
    }

    int dx = 0;
    string s = strA;
    for (int k = 0; k < cssize - 1; k++)
    {
        if (changeSet[k].data == changeSet[k + 1].data)
        {
            continue;
        }

        cout << s << " => ";
        if (changeSet[k + 1].first > changeSet[k].first && changeSet[k + 1].second > changeSet[k].second)
        {
            s.replace(changeSet[k + 1].first - 1 + dx, 1, string(1, strB[changeSet[k + 1].second - 1]));
            cout << s << " - substitution\n" << endl;
        }
        else if (changeSet[k + 1].first > changeSet[k].first)
        {
            s.replace(changeSet[k + 1].first - 1 + dx, 1, "");
            cout << s << " - delettion\n" << endl;
            dx--;
        }
        else
        {
            s.insert(changeSet[k].first + dx, string(1, strB[changeSet[k + 1].second - 1]));
            cout << s << " - insertion\n" << endl;
            dx++;
        }
    }

    delete[] changeSet;

    cout << "\n";
    return A[m][n];
}

int main()
{
    for (int i = 0; i < 10; i++)
    {
        string strA, strB;
        cout << "string A: ";
        getline(cin, strA);
        cout << "string B: ";
        getline(cin, strB);
        cout << "Answer = " << DamerauLevensteinDistance(strA, strB)
            << "\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::\n\n";
    }

    return 0;
}